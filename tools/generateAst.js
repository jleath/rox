const fs = require('fs');
const path = require('path');

const expressionTypes = [
  'Binary   ~ left: Box<Expr>, operator: Token, right: Box<Expr>',
  'Grouping ~ expression: Box<Expr>',
  'Literal  ~ value: Literal',
  'Unary    ~ operator: Token, right: Box<Expr>',
];

const outputPath = path.resolve(__dirname, '../src/');

function writeLine(path, content='') {
  try {
    fs.appendFileSync(path, content + "\n");
  } catch (err) {
    console.error(err);
  }
}

function defineEnum(path, baseName, types) {
  writeLine(path, '#[derive(Debug, Clone, PartialEq)]');
  writeLine(path, `pub enum ${baseName} {`)
  types.forEach(type => {
    const structName = type.split('~')[0].trim();
    const fields = type.split('~')[1].trim().split(',').map(field => field.split(':')[1].trim()).join(', ');
    writeLine(path, `    ${structName}(${fields}),`);
  });
  writeLine(path, '}');
}

function defineVisitor(path, baseName, types) {
  writeLine(path, `pub trait ${baseName}Visitor<T> {`);
  writeLine(path, `    fn evaluate(&mut self, ${baseName.toLowerCase()}: ${baseName}) -> T {`);
  writeLine(path, `        match ${baseName.toLowerCase()} {`);
  types.forEach(type => {
    const typeName = type.split('~')[0].trim();
    const fields = type.split('~')[1].trim().split(', ');
    const fieldNames = fields.map(field => field.split(': ')[0].trim());
    writeLine(path, `            ${baseName}::${typeName}(${fieldNames.join(', ')}) => self.visit_${typeName.toLowerCase()}_${baseName.toLowerCase()}(${fieldNames.join(', ')}),`);
  });
  writeLine(path, '        }');
  writeLine(path, '    }');
  types.forEach(type => {
    const typeName = type.split('~')[0].trim();
    const fields = type.split('~')[1].trim();
    writeLine(path, `    fn visit_${typeName.toLowerCase()}_${baseName.toLowerCase()}(&mut self, ${fields}) -> T;`);
  })
  writeLine(path, '}');
  writeLine(path);
}

function defineAst(baseName, types) {
  const path = outputPath + '/' + baseName.toLowerCase() + '.rs';
  fs.truncateSync(path, 0);
  writeLine(path, '// generated by tools/generateAst.js');
  writeLine(path);
  writeLine(path, 'use crate::token::{Literal, Token};');
  writeLine(path);
  defineEnum(path, baseName, types);
  writeLine(path);
  defineVisitor(path, baseName, types);
  writeLine(path);
}

function main() {
  defineAst('Expr', expressionTypes);
}

main();