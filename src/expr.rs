// generated by tools/generateAst.js

use crate::token::{Literal, Token};

#[derive(Debug, Clone, PartialEq)]
pub enum Expr {
    Binary(Box<Expr>, Token, Box<Expr>),
    Grouping(Box<Expr>),
    Literal(Literal),
    Unary(Token, Box<Expr>),
}

pub trait ExprVisitor<T> {
    fn evaluate(&mut self, expr: Expr) -> T {
        match expr {
            Expr::Binary(left, operator, right) => self.visit_binary_expr(left, operator, right),
            Expr::Grouping(expression) => self.visit_grouping_expr(expression),
            Expr::Literal(value) => self.visit_literal_expr(value),
            Expr::Unary(operator, right) => self.visit_unary_expr(operator, right),
        }
    }
    fn visit_binary_expr(&mut self, left: Box<Expr>, operator: Token, right: Box<Expr>) -> T;
    fn visit_grouping_expr(&mut self, expression: Box<Expr>) -> T;
    fn visit_literal_expr(&mut self, value: Literal) -> T;
    fn visit_unary_expr(&mut self, operator: Token, right: Box<Expr>) -> T;
}
